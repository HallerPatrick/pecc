{
    "year": 2017,
    "day": 21,
    "part1": {
        "description": "",
        "answer": "179",
        "converted_description": "You are given a set of enhancement rules for a pattern of pixels in a two-dimensional grid. The pattern starts with a size of 3x3 and follows a process of repeatedly enhancing the detail of the image. If the size is evenly divisible by 2, the pixels are broken up into 2x2 squares and each square is converted into a 3x3 square according to the corresponding enhancement rule. If the size is evenly divisible by 3, the pixels are broken up into 3x3 squares and each square is converted into a 4x4 square according to the corresponding enhancement rule. The goal is to determine how many pixels stay on after a certain number of iterations.\n\nInput Format:\nThe input is a set of enhancement rules represented as strings. Each rule consists of two patterns separated by \"=>\" symbol. The first pattern represents the input pattern and the second pattern represents the output pattern after enhancement."
    },
    "part2": {
        "description": "",
        "answer": "2766750",
        "converted_description": "The challenge is the same as Part 1, but now you need to determine how many pixels stay on after 18 iterations.\n\nInput Format:\nThe input is a set of enhancement rules represented as strings. Each rule consists of two patterns separated by \"=>\" symbol. The first pattern represents the input pattern and the second pattern represents the output pattern after enhancement."
    },
    "input": "../.. => ###/.#./.##\n#./.. => .../###/#.#\n##/.. => #.#/..#/..#\n.#/#. => ##./.##/..#\n##/#. => ###/.../###\n##/## => ###/##./.#.\n.../.../... => .#../..##/...#/....\n#../.../... => .#../..##/.##./####\n.#./.../... => .#../###./.#../#..#\n##./.../... => #.##/#..#/...#/.#..\n#.#/.../... => ##.#/.#.#/#.#./..##\n###/.../... => #..#/#.##/..../#.##\n.#./#../... => .#.#/.#../..../.#.#\n##./#../... => ###./..../.##./###.\n..#/#../... => .#../###./####/.#..\n#.#/#../... => ..##/.#../#.#./##.#\n.##/#../... => #..#/##../.###/#...\n###/#../... => #.##/##../.#.#/####\n.../.#./... => ####/.###/..#./###.\n#../.#./... => ###./..../#.../#...\n.#./.#./... => .#../###./.#.#/....\n##./.#./... => #.##/#..#/.#.#/##..\n#.#/.#./... => #.../..../##../....\n###/.#./... => ..../...#/##../####\n.#./##./... => ..../.###/.#.#/#...\n##./##./... => ..##/.##./###./#.##\n..#/##./... => ...#/#.#./#.#./#..#\n#.#/##./... => ..##/###./#.##/..#.\n.##/##./... => .###/..../##../#.##\n###/##./... => .#../...#/..##/##..\n.../#.#/... => ...#/#.##/#.../####\n#../#.#/... => .##./.#../###./.###\n.#./#.#/... => ##.#/.#.#/#.../.##.\n##./#.#/... => ####/#..#/..#./....\n#.#/#.#/... => #.##/.##./####/.#..\n###/#.#/... => ..##/..#./#..#/.#..\n.../###/... => #..#/#.../.##./.##.\n#../###/... => ##../###./#.##/####\n.#./###/... => .#../..##/#..#/...#\n##./###/... => ..#./#..#/.###/..#.\n#.#/###/... => #..#/#.#./#.#./#.##\n###/###/... => #.../.##./..../.##.\n..#/.../#.. => .###/.##./.##./#.##\n#.#/.../#.. => #.../..#./.###/...#\n.##/.../#.. => #..#/..../.##./.#.#\n###/.../#.. => .##./##.#/.#.#/##..\n.##/#../#.. => ...#/#.##/.#../.#..\n###/#../#.. => ##.#/#.#./#.../##..\n..#/.#./#.. => .#../#.../#.../####\n#.#/.#./#.. => .##./.##./#.##/.#.#\n.##/.#./#.. => ##../.#.#/#.../.#..\n###/.#./#.. => ..#./.#../..#./.###\n.##/##./#.. => #.../#..#/..##/###.\n###/##./#.. => ..../#..#/.#../####\n#../..#/#.. => ..#./#.#./####/#...\n.#./..#/#.. => .##./.###/#.../#.#.\n##./..#/#.. => ##../.#.#/...#/#.##\n#.#/..#/#.. => ####/###./##.#/...#\n.##/..#/#.. => ##.#/###./#..#/###.\n###/..#/#.. => .###/#..#/...#/.#.#\n#../#.#/#.. => ##../##../#.../##.#\n.#./#.#/#.. => #.../.###/...#/..#.\n##./#.#/#.. => .#../..../#..#/..##\n..#/#.#/#.. => ##../##.#/..#./#..#\n#.#/#.#/#.. => .#../###./#.##/#.##\n.##/#.#/#.. => ..../..#./#..#/####\n###/#.#/#.. => ####/.#.#/...#/###.\n#../.##/#.. => .#.#/#.##/##.#/.###\n.#./.##/#.. => ##.#/#.#./.#.#/.##.\n##./.##/#.. => .##./#.#./..../.#..\n#.#/.##/#.. => ###./.#../#.../....\n.##/.##/#.. => #.##/##../#.##/...#\n###/.##/#.. => .##./..../...#/##..\n#../###/#.. => #..#/#..#/#..#/####\n.#./###/#.. => .#.#/#.#./.#.#/####\n##./###/#.. => ##../#.#./#..#/....\n..#/###/#.. => .##./##../..../###.\n#.#/###/#.. => ..##/#.../#.../#.#.\n.##/###/#.. => ..##/##.#/#.##/#.##\n###/###/#.. => .#.#/..##/###./.#..\n.#./#.#/.#. => ..../.#../.###/.#..\n##./#.#/.#. => ...#/#.../.#.#/...#\n#.#/#.#/.#. => ..../..##/..../.#..\n###/#.#/.#. => #.#./#.##/##../###.\n.#./###/.#. => #.##/..#./.#../###.\n##./###/.#. => .#../..##/...#/#.#.\n#.#/###/.#. => #.../...#/###./#...\n###/###/.#. => ..##/##.#/..#./#.#.\n#.#/..#/##. => .#.#/#.#./####/..#.\n###/..#/##. => #..#/##.#/..../#...\n.##/#.#/##. => #..#/...#/#.##/.#..\n###/#.#/##. => .#.#/###./#.../#.##\n#.#/.##/##. => .#../#.#./.#../..#.\n###/.##/##. => ..#./##../##../.###\n.##/###/##. => .###/#.##/##../.##.\n###/###/##. => ..##/#.../.#.#/..##\n#.#/.../#.# => .#../.#../##.#/.##.\n###/.../#.# => .#.#/...#/.#../#.#.\n###/#../#.# => ...#/#..#/..#./.###\n#.#/.#./#.# => ##../##.#/####/...#\n###/.#./#.# => .#.#/...#/..#./#..#\n###/##./#.# => .###/##.#/.#../#.##\n#.#/#.#/#.# => #.../#.../.#.#/...#\n###/#.#/#.# => .#../#.#./##.#/..#.\n#.#/###/#.# => .###/#..#/####/####\n###/###/#.# => ####/#..#/.##./#...\n###/#.#/### => #.#./..##/#.../#.#.\n###/###/### => .###/.##./#.#./...#"
}